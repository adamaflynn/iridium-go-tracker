# Welcome to Serverless!

# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: iridium-go-map

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  profile: serverless
  region: us-west-2

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: 'arn:aws:dynamodb:us-west-2:504011484576:table/tracker-points' 

resources:
  Resources:
    S3BucketEmails:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: svreverence-tracker-emails
        LifecycleConfiguration:
            Rules:
                - ExpirationInDays: 7
                  Status: Enabled
    TrackerEmailBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: svreverence-tracker-emails
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
                - Sid: AllowSESPuts
                  Effect: Allow
                  Principal:
                      Service: ses.amazonaws.com
                  Action: s3:PutObject
                  Resource: arn:aws:s3:::svreverence-tracker-emails/*
                  Condition:
                      StringEquals:
                          aws:Referer: '504011484576' 
    LambdaReadS3EmailsPermission:
       Type: "AWS::Lambda::Permission"
       Properties:
         FunctionName:
           "Fn::GetAtt":
             - AddPositionLambdaFunction
             - Arn
         Principal: "s3.amazonaws.com"
         Action: "lambda:InvokeFunction"
         SourceAccount:
           Ref: AWS::AccountId
         SourceArn: "arn:aws:s3:::svreverence-tracker-emails"

functions:
  AddPosition:
    handler: add_position.handler 
    events:
        - s3: emails
          event: s3:ObjectCreated:*
  RenderMap:
    handler: render_map.handler
    events:
      - http: 'GET /'


# you can overwrite defaults here
#  stage: dev


# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
